Description: >
    This template deploys Solodev Portal for Docker ECS

Parameters: 

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id
        
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    ClusterArn:
        Description: ECS Cluster ARN
        Type: String

    LoadBalancer:
        Description: The VPC that the ECS cluster is deployed to
        Type: String

    LoadBalancerSecurityGroup:
        Description: Select the Load Balancer Security Group to use for the cluster hosts
        Type: AWS::EC2::SecurityGroup::Id

    Subnets:
        Description: Choose which subnets this cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    MaxCount:
        Description: Maximum number of instances of this task we can run across our cluster
        Type: Number
        Default: 3

    Path: 
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /

    ServiceRole:
        Description: The Application Load Balancer Service Role
        Type: String

    DatabaseHost:
      Type: String
      Description: The database host

    MongoHost:
      Type: String
      Description: The mongo host
      Default: "127.0.0.1:27017"

    DatabaseName:
      Type: String
      Description: The database name

    DatabaseUsername:
      Type: String
      Description: The database user name
      Default: "root"

    DatabasePassword:
      Type: String
      Description: The database user password
        
    DatabasePort:
        Default: '3306'
        Description: Database Port
        Type: Number

    AdminUsername:
      Type: String
      Description: The admin user name
      Default: "solodev"

    AdminPassword:
      Type: String
      Description: The admin user password

    PortalContainer:
      Description: Solodev portal container image
      Type: String

    UIContainer:
      Description: UI container image
      Type: String

    NginxContainer:
      Description: Nginx container image
      Type: String

    MongoContainer:
      Description: Mongo container image
      Type: String

    RedisContainer:
      Description: Mongo container image
      Type: String
      Default: 'redis:alpine'

    FQDN:
      Type: String
      Description: URL for app. FQDN must be pointed to CNAME of the load balancer.
      Default: ''

    CertificateArn:
      Type: String
      Description: SSL cert for HTTPS listener that matches the FQDN
      Default: ''

    CronSchedule:
      Type: String
      Default: "cron(0,15,30,45 * * * ? *)"
      Description: "Backup cron schedule"

    RestoreBucketName:
        Default: ''
        Description: Name of bucket containing files for restore
        Type: String

    DeletionPolicy:
        Default: 'Snapshot'
        Type: String
        Description: 'Asset Deletion Policy'

Conditions:
    UseHTTPS: !Not [!Equals [ !Ref CertificateArn, "" ]]
    UseHTTP: !Equals [ !Ref CertificateArn, "" ]
    UseRestoreBucket: !Equals [ !Ref RestoreBucketName, "" ]

Resources:

    PortalBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: !Join ['-', [!Ref 'EnvironmentName', 'portal']]
            AccessControl: 'BucketOwnerFullControl'
            Tags:
                -
                  Key: 'Name'
                  Value: !Join ['-', [!Ref 'EnvironmentName', 'S3']]
        DeletionPolicy: 'Delete'

    BackupUser:
        Type: 'AWS::IAM::User'
        Properties:
            Path: /
            Policies:
                - 
                    PolicyName: root
                    PolicyDocument:
                        Statement:
                            - 
                                Effect: Allow
                                Action:
                                    - 'cloudformation:DescribeStackResource'
                                Resource: '*'
                - 
                    PolicyName: backupdef
                    PolicyDocument:
                        Statement: 
                            - 
                                Action: 
                                    - 's3:*'
                                Effect: "Allow"
                                Resource: 
                                    Fn::Join: 
                                    - ""
                                    - 
                                        - "arn:aws:s3:::"
                                        - !Join ['-', [!Ref 'EnvironmentName', 'portal']]
                            - 
                                Action: 
                                    - 's3:*'
                                Effect: "Allow"
                                Resource: 
                                    Fn::Join: 
                                    - ""
                                    - 
                                        - "arn:aws:s3:::"
                                        - !Join ['-', [!Ref 'EnvironmentName', 'portal']]
                                        - "/*"

    BackupUserKeys:
        Type: 'AWS::IAM::AccessKey'
        Properties:
            UserName: !Ref BackupUser

    Service: 
        Type: AWS::ECS::Service
        Properties: 
            Cluster: !Ref Cluster
            TaskDefinition: !Ref TaskDefinition
            SchedulingStrategy: DAEMON
            HealthCheckGracePeriodSeconds: 300
            ServiceName: solodev-portal
            LoadBalancers: 
                - ContainerName: "nginx"
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroup

    ServiceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: "Inbound web traffic"
            SecurityGroupIngress:
                - {ToPort: 80, FromPort: 80, IpProtocol: tcp, SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup} # HTTP
                - {ToPort: 443, FromPort: 443, IpProtocol: tcp, SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup} # HTTPS
            VpcId: !Ref VPC

    TaskExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                - {Action: "sts:AssumeRole", Effect: Allow, Principal: {Service: ecs-tasks.amazonaws.com}}
            Path: "/"
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

    TaskRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                - {Action: "sts:AssumeRole", Effect: Allow, Principal: {Service: ecs-tasks.amazonaws.com}}
            Path: "/"
            Policies: 
                - 
                    PolicyName: "portal-inline"
                    PolicyDocument: 
                        Version: "2012-10-17"
                        Statement: 
                            -   
                                Effect: Allow
                                Action:
                                  - 's3:*'
                                Resource: !Join ['', ['arn:aws:s3:::', !Ref 'PortalBucket', /*]]

    BackupTaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Join ['-', [!Ref 'EnvironmentName', 'portal-backup']]
            ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
            TaskRoleArn: !GetAtt TaskRole.Arn
            NetworkMode: "host"
            ContainerDefinitions:
                - 
                    Name: backup
                    MountPoints: 
                        - 
                            SourceVolume: "portal-client"
                            ContainerPath: "/var/www/portal/client"
                        - 
                            SourceVolume: "portal-backup"
                            ContainerPath: "/root/.duply"
                    Image: techcto/duplicity:latest
                    Essential: true
                    Memory: '500'
                    Environment:
                        - Name: MOUNT
                          Value: "/var/www/portal/client"
                        - Name: PROCESS
                          Value: 'backup'
                        - Name: BUCKET
                          Value: !Ref PortalBucket
                        - Name: DB_HOST
                          Value: !Ref DatabaseHost
                        - Name: DB_NAME
                          Value: !Ref DatabaseName
                        - Name: DB_USER
                          Value: !Ref DatabaseUsername
                        - Name: DB_PASSWORD
                          Value: !Ref DatabasePassword
                        - Name: MONGO_HOST
                          Value: '127.0.0.1:27017'
                        - Name: MONGO_DB
                          Value: 'portal'
                        - Name: IAM_ACCESS_KEY
                          Value: !Ref BackupUserKeys
                        - Name: IAM_SECRET_KEY
                          Value: !GetAtt 
                            - BackupUserKeys
                            - SecretAccessKey
                        - Name: GPG_PW
                          Value: 'iYJQC1nt/CL7W+vi+t12WmqXpcI='
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: portal-backup
            Volumes: 
                - 
                    Host: 
                        SourcePath: !Join ['', ['/efs/', !Ref 'EnvironmentName', '/client']]
                    Name: "portal-client"
                - 
                    Host: 
                        SourcePath: !Join ['', ['/efs/', !Ref 'EnvironmentName', '/backup']]
                    Name: "portal-backup"

    RestoreTaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Join ['-', [!Ref 'EnvironmentName', 'portal-restore']]
            ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
            TaskRoleArn: !GetAtt TaskRole.Arn
            NetworkMode: "host"
            ContainerDefinitions:
                - 
                    Name: restore
                    MountPoints: 
                        - 
                            SourceVolume: "portal-client"
                            ContainerPath: "/var/www/portal/client"
                        - 
                            SourceVolume: "portal-backup"
                            ContainerPath: "/root/.duply"
                    Image: techcto/duplicity:latest
                    Essential: true
                    Memory: '500'
                    Environment:
                        - Name: PROCESS
                          Value: 'restore'
                        - Name: TIME
                          Value: '1h'
                        - Name: BUCKET
                          Value: !Ref PortalBucket
                        - Name: MOUNT
                          Value: "/var/www/portal/client"
                        - Name: IAM_ACCESS_KEY
                          Value: !Ref BackupUserKeys
                        - Name: IAM_SECRET_KEY
                          Value: !GetAtt 
                            - BackupUserKeys
                            - SecretAccessKey
                        - Name: GPG_PW
                          Value: 'iYJQC1nt/CL7W+vi+t12WmqXpcI='
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: portal-restore
            Volumes: 
                - 
                    Host: 
                        SourcePath: !Join ['', ['/efs/', !Ref 'EnvironmentName', '/client']]
                    Name: "portal-client"
                - 
                    Host: 
                        SourcePath: !Join ['', ['/efs/', !Ref 'EnvironmentName', '/backup']]
                    Name: "portal-backup"

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: !Join ['-', [!Ref 'EnvironmentName', 'portal']]
            ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
            TaskRoleArn: !GetAtt TaskRole.Arn
            NetworkMode: "host"
            ContainerDefinitions:
                -
                    Name: portal
                    PortMappings:
                        - 
                            ContainerPort: 9000
                            Protocol: "tcp"
                    MountPoints: 
                        - 
                            SourceVolume: "portal-client"
                            ContainerPath: "/var/www/portal/client"
                    Essential: true
                    Essential: true
                    Image: !Ref PortalContainer
                    Memory: '500'
                    Environment:
                        - Name: APP_DEBUG
                          Value: false
                        - Name: APP_ENV
                          Value: 'prod'
                        - Name: DATABASE_URL
                          Value: !Join ["", ["mysql://", !Ref DatabaseUsername, ":", !Ref DatabasePassword, "@", "127.0.0.1", ":3306/", !Ref DatabaseName]]
                        - Name: MONGO_HOST
                          Value: '127.0.0.1:27018'
                        - Name: REDIS_HOST
                          Value: '127.0.0.1:6379'
                        - Name: SOLODEV_USER
                          Value: !Ref AdminUsername
                        - Name: SOLODEV_PASSWORD
                          Value: !Ref AdminPassword
                        - Name: FQDN
                          Value: !Ref FQDN
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: portal
                - 
                    Name: nginx
                    PortMappings:
                        - 
                            ContainerPort: 80
                            Protocol: "tcp"
                        - 
                            ContainerPort: 443
                            Protocol: "tcp"
                    Essential: true
                    Image: !Ref NginxContainer
                    MemoryReservation: 256
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: portal-nginx
                - 
                    Name: ui
                    PortMappings:
                        - 
                            ContainerPort: 3000
                            Protocol: "tcp"
                    Essential: true
                    Image: !Ref UIContainer
                    MemoryReservation: 256
                    Environment:
                        - Name: NODE_ENV
                          Value: 'prod'
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: portal-ui
                - 
                    Name: mongodb
                    PortMappings:
                        - 
                            HostPort: 27018
                            ContainerPort: 27018
                            Protocol: "tcp"
                    MountPoints: 
                        - 
                            SourceVolume: "portal-mongo"
                            ContainerPath: "/data"
                    Essential: true
                    Image: !Ref MongoContainer
                    MemoryReservation: 256
                    Environment:
                        - Name: MONGO_INITDB_ROOT_USERNAME
                          Value: !Ref DatabaseUsername
                        - Name: MONGO_INITDB_ROOT_PASSWORD
                          Value: !Ref DatabasePassword
                        - Name: MONGO_INITDB_DATABASE
                          Value: 'portal'
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: portal-mongo
                - 
                    Name: redis
                    PortMappings:
                        - 
                            HostPort: 6379
                            ContainerPort: 6379
                            Protocol: "tcp"
                    Essential: true
                    Image: !Ref RedisContainer
                    MemoryReservation: 256
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: portal-redis
                - 
                    Name: mysql
                    PortMappings:
                        - 
                            HostPort: 3306
                            ContainerPort: 3306
                            Protocol: "tcp"
                    Essential: true
                    Image: 'mysql:5.7.20'
                    MemoryReservation: 256
                    MountPoints: 
                        - 
                            SourceVolume: "portal-mysql"
                            ContainerPath: "/var/lib/mysql"
                    Command: ["--sql_mode="]
                    Environment:
                        - Name: MYSQL_DATABASE
                          Value: !Ref DatabaseName
                        - Name: MYSQL_PASSWORD
                          Value: !Ref DatabasePassword
                        - Name: MYSQL_ROOT_PASSWORD
                          Value: !Ref DatabasePassword
                        - Name: MYSQL_USER
                          Value: !Ref DatabaseUsername
                    LogConfiguration:
                        LogDriver: awslogs
                        Options:
                            awslogs-group: !Ref AWS::StackName
                            awslogs-region: !Ref AWS::Region
                            awslogs-stream-prefix: portal-mysql
            Volumes: 
                - 
                    Host: 
                        SourcePath: !Join ['', ['/efs/', !Ref 'EnvironmentName', '/client']]
                    Name: "portal-client"
                - 
                    Host: 
                        SourcePath: !Join ['', ['/efs/', !Ref 'EnvironmentName', '/mysql']]
                    Name: "portal-mysql"
                - 
                    Host: 
                        SourcePath: !Join ['', ['/efs/', !Ref 'EnvironmentName', '/mongo']]
                    Name: "portal-mongo"
                - 
                    Host: 
                        SourcePath: !Join ['', ['/efs/', !Ref 'EnvironmentName', '/backup']]
                    Name: "portal-backup"

    ECSEventRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                - Effect: Allow
                  Principal:
                    Service:
                        - events.amazonaws.com
                  Action:
                    - 'sts:AssumeRole'
            Path: /
            Policies:
                - PolicyName: ecs-service
                  PolicyDocument:
                    Statement:
                        - Effect: Allow
                          Action:
                            - 'ecs:RunTask'
                            - 'iam:ListInstanceProfiles'
                            - 'iam:ListRoles'
                            - 'iam:PassRole'
                          Resource: '*'

    ECSScheduledTask:
        DependsOn: ECSEventRole
        Type: 'AWS::Events::Rule'
        Properties:
            Description: Creating a Schedule with CloudFormation as an example
            ScheduleExpression: !Ref CronSchedule
            State: ENABLED
            Targets:
              - 
                Arn: !Ref ClusterArn
                Id: Target1
                RoleArn: !GetAtt 
                    - ECSEventRole
                    - Arn
                EcsParameters:
                    TaskCount: 1
                    TaskDefinitionArn: !Ref BackupTaskDefinition

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 30  

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher: 
                HttpCode: 200-301
            HealthCheckIntervalSeconds: 45
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 30
            HealthyThresholdCount: 2
            UnhealthyThresholdCount: 3
            TargetGroupAttributes:
                - Key: deregistration_delay.timeout_seconds
                  Value: '120'
                - Key: stickiness.type
                  Value: lb_cookie
                - Key: stickiness.enabled
                  Value: 'true'
                - Key: stickiness.lb_cookie.duration_seconds
                  Value: '2000'
            Name: !Join 
                - '-'
                - - !Ref 'EnvironmentName'
                  - portal

    Listener:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Condition: UseHTTP
        Properties:
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref TargetGroup
            LoadBalancerArn: !Ref LoadBalancer
            Port: 80
            Protocol: HTTP

    ListenerSSL:
        Type: 'AWS::ElasticLoadBalancingV2::Listener'
        Condition: UseHTTPS
        Properties:
            Certificates: 
                - CertificateArn: !Ref CertificateArn
            DefaultActions:
                - Type: forward
                  TargetGroupArn: !Ref TargetGroup
            LoadBalancerArn: !Ref LoadBalancer
            Port: 443
            Protocol: HTTPS
    
    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Condition: UseHTTP
        Properties:
            ListenerArn: !Ref Listener
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values: 
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    ListenerSSLRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Condition: UseHTTPS
        Properties:
            ListenerArn: !Ref ListenerSSL
            Priority: 2
            Conditions:
                - Field: path-pattern
                  Values: 
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

Outputs:

    PortalBucket:
        Description: A reference to the S3 bucket for solodev portal
        Value: !Ref PortalBucket