{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Solodev CMS Pro for Opsworks Classic",

	"Parameters": {
    "ClientName":{
      "Default":"solodev",
      "Description":"Name of client",
      "Type":"String"
    },
    "VpcId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud."
    },
    "HostedZoneName":{
    	"Default":"solodev.net",
    	"Description":"Name of domain",
      "Type":"String"
    },
    "KeyName": {
      "Default": "",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstallBucketName":{
      "Default":"solodev-install",
      "Description":"Name of bucket containing files for download",
      "Type":"String"
    },
    "RestoreBucketName":{
      "Default":"",
      "Description":"Name of bucket containing files for restore",
      "Type":"String"
    },
    "CMSDir":{
      "Default":"solodevX",
      "Description":"Location of CMS Dir",
      "Type":"String"
    },
    "Subnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription": "must be a list of an existing subnets in the selected Virtual Private Cloud."
    },
    "WebServerPort":{
      "Description":"TCP/IP port of the web server",
      "Type":"String",
      "Default":"80"
    },
    "InstanceType":{
      "Description":"WebServer EC2 instance type",
      "Type":"String",
      "Default":"t2.small",
      "AllowedValues":[
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m3.xlarge",
        "m3.2xlarge"
      ],
      "ConstraintDescription":"must be a valid EC2 instance type."
    },
    "DBName":{
      "Default":"solodev",
      "Description":"The database name",
      "Type":"String",
      "MinLength":"1",
      "MaxLength":"64",
      "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
    },
    "DBUsername":{
      "Default":"solodev",
      "NoEcho":"true",
      "Description":"The database admin account username",
      "Type":"String",
      "MinLength":"1",
      "MaxLength":"16",
      "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword":{
      "Default":"password",
      "NoEcho":"true",
      "Description":"The database admin account password",
      "Type":"String",
      "MinLength":"8",
      "MaxLength":"41",
      "AllowedPattern":"[a-zA-Z0-9]*",
      "ConstraintDescription":"must contain only alphanumeric characters."
    },
    "DBClass":{
      "Default":"db.t2.small",
      "Description":"Database instance class",
      "Type":"String",
      "AllowedValues":[
        "db.t2.small",
        "db.t2.medium",
        "db.m3.medium",
        "db.t2.large",
        "db.m4.large",
        "db.m4.xlarge",
        "db.m4.2xlarge",
        "db.m4.4xlarge"
      ],
      "ConstraintDescription":"must select a valid database instance type."
    },
    "MultiAZDatabase":{
      "Default":"true",
      "Description":"Create a multi-AZ MySQL Amazon RDS database instance",
      "Type":"String",
      "AllowedValues":[
        "true",
        "false"
      ],
      "ConstraintDescription":"must be either true or false."
    },
    "DBAllocatedStorage":{
      "Default":"5",
      "Description":"The size of the database (Gb)",
      "Type":"Number",
      "MinValue":"5",
      "MaxValue":"1024",
      "ConstraintDescription":"must be between 5 and 1024Gb."
    },
    "AdminUser": {
      "Description":"CMS Admin User",
      "Type":"String"
    },
    "AdminPassword": {
      "Description":"CMS Admin Password",
      "Type":"String"
    },
    "VolumeName":{
      "Default":"solodev",
      "Description":"Name of client volume",
      "Type":"String"
    },
    "MongoVolumeSize": {
      "Default": "10",
      "Description": "Size of Mongo EBS Volume used as Storage brick.",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024"
    },
    "DeploymentType" : {
	    "Type" : "String",
	    "Default" : "SolodevProduction",
	    "AllowedValues" : ["SolodevFeature", "SolodevStaging", "SolodevProduction"],
	    "Description" : "Pick deployment type."
	  },
    "CustomerId": {
      "Default":"",      
      "Type":"String",     
      "Description":"CustomerId"
    },
    "THEME": {
      "Default":"",      
      "Type":"String",     
      "Description":"THEME"
    },
    "WEBSITE": {
      "Default":"",      
      "Type":"String",     
      "Description":"WEBSITE"
    }
  },

  "Mappings": {

    "AWSRegionWebBaseAMI":{
      "us-east-1":{
        "64":"ami-01eb10adf6dc080f6"
      },
      "us-west-2":{
        "64":""
      }
    },
    
    "AWSInstanceType2Arch":{
      "t2.micro":{
        "Arch":"64"
      },
      "t2.small":{
        "Arch":"64"
      },
      "t2.medium":{
        "Arch":"64"
      },
      "t2.large":{
        "Arch":"64"
      },
      "m1.small":{
        "Arch":"64"
      },
      "m1.medium":{
        "Arch":"64"
      },
      "m1.large":{
        "Arch":"64"
      },
      "m1.xlarge":{
        "Arch":"64"
      },
      "m2.xlarge":{
        "Arch":"64"
      },
      "m2.2xlarge":{
        "Arch":"64"
      },
      "m2.4xlarge":{
        "Arch":"64"
      },
      "m3.xlarge":{
        "Arch":"64"
      },
      "m3.2xlarge":{
        "Arch":"64"
      },
      "c1.medium":{
        "Arch":"64"
      },
      "c1.xlarge":{
        "Arch":"64"
      }
    },
    
    "Region2Principal" : {
      "us-east-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "us-west-2"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "us-west-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "eu-west-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-southeast-1" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-northeast-1" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "ap-southeast-2" : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "sa-east-1"      : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" },
      "cn-north-1"     : { "EC2Principal" : "ec2.amazonaws.com.cn", "OpsWorksPrincipal" : "opsworks.amazonaws.com.cn" },
      "eu-central-1"   : { "EC2Principal" : "ec2.amazonaws.com", "OpsWorksPrincipal" : "opsworks.amazonaws.com" }
    }
  },

  "Resources": {
    
    "S3BackupBucket" : {
       "Type" : "AWS::S3::Bucket",
       "Properties" : {
	       "BucketName": {
	       	"Fn::Join": ["-", [{"Ref":"ClientName"}, {"Ref": "AWS::StackName"}, "backup"]]
	       },
	       "AccessControl": "BucketOwnerFullControl",
	       "Tags":[
       		{"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "S3"]]}}
       	 ]
       },
       "DeletionPolicy" : "Delete"
    },
    
    "MountTargetSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VpcId" },
        "GroupDescription": "Security group for mount target",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "2049",
            "ToPort": "2049",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    
    "FileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "EFS"]]}
          }
        ]
      }
    },
    
    "MountTarget1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": { "Ref": "FileSystem" },
        "SubnetId": { "Fn::Select": [ "0", { "Ref":"Subnets" } ] },
        "SecurityGroups": [ { "Ref": "MountTargetSecurityGroup" } ]        
      }
    },
    
    "SolodevStack": {
      "Type": "AWS::OpsWorks::Stack",
      "Properties": {
        "Name": { "Ref": "AWS::StackName" },
        "DefaultOs": "Custom",
        "ConfigurationManager": {
        	"Name": "Chef",
        	"Version": "12"
        },
        "ServiceRoleArn": { "Fn::GetAtt": [ "OpsWorksServiceRole", "Arn" ] },
        "DefaultInstanceProfileArn": { "Fn::GetAtt": [ "SolodevInstanceProfile", "Arn" ] },
        "VpcId": { "Ref": "VpcId" },
        "DefaultSubnetId": { "Fn::Select": [ "0", { "Ref":"Subnets" } ] },
        "UseCustomCookbooks": "true",
        "CustomCookbooksSource": {
				  "Revision": "master",
				  "Type" : "s3",
				  "Url" : "https://s3.amazonaws.com/solodev-aws/cookbooks.tar.gz"
		    },
		    "CustomJson": {
		    	"newrelic": {
			        "license": "a6a78ab1cb1212fa4c376517d96bb8a9d4b64be0"
			    },
			   	"solodev": {
			    		"customer_id": {"Ref": "CustomerId"}
			    },
		    	"install": {
		    		"StackName": {"Ref": "AWS::StackName"},
		    		"HostedZoneName": {"Ref": "HostedZoneName"},
		    		"Region": {"Ref": "AWS::Region"},
		    		"VolumeName": {"Ref":"VolumeName"},
		    		"document_root": "/var/www",
		    		"control_root": "/var/www/Solodev/clients/solodev",
		    		"mongo_nodes": {"Ref":"DeploymentType"},
		    		"software_name": "Solodev",
		    		"client_name": "solodev",
		    		"apache_conf_dir": "/etc/httpd/conf.d",
		    		"AWSAccessKeyId": {"Ref":"CfnKeys"},
		    		"AWSSecretKey": {"Fn::GetAtt":["CfnKeys","SecretAccessKey"]},
		    		"InstallBucketName": {"Ref":"InstallBucketName"},
		    		"RestoreBucketName": {"Ref":"RestoreBucketName"},
		    		"BackupBucketName": {"Fn::Join": ["-", [{"Ref":"ClientName"}, {"Ref": "AWS::StackName"}, "backup"]]},
		    		"CMSDir": {"Ref":"CMSDir"},
		    		"DBName": {"Ref":"DBName"},
		    		"DBHOST": {
	            "Fn::GetAtt":[
	              "DB",
	              "Endpoint.Address"
	            ]
	          },
		    		"DBUSER": {"Ref":"DBUsername"},
		    		"DBPASSWORD": {"Ref":"DBPassword"},
		    		"ADMINUSER": {"Ref":"AdminUser"},
		    		"ADMINPASSWORD": {"Ref":"AdminPassword"},
		    		"EFSHOST": {"Ref":"FileSystem"},
		    		"THEME": {"Ref":"THEME"},
		    		"WEBSITE": {"Ref":"WEBSITE"}
		    	}
		    }
      }
    },

    "WebServerLayer": {
      "Type": "AWS::OpsWorks::Layer",
      "Metadata" : {
        "Comment" : "OpsWorks instances require outbound Internet access. Using DependsOn to make sure outbound Internet Access is estlablished before creating instances in this layer."
      },
      "DependsOn": [ "SolodevApp"],
      "Properties": {
        "StackId": { "Ref": "SolodevStack" },
        "Name": { "Ref": "DeploymentType" },
        "Type": "custom",
        "Shortname": "solodev-web",
        "EnableAutoHealing": "true",
        "AutoAssignElasticIps": "true",
        "AutoAssignPublicIps": "true",
        "LoadBasedAutoScaling" : {
          "DownScaling" : { 
            "CpuThreshold" : 50,
					  "IgnoreMetricsTime" : 10,
					  "InstanceCount" : 1,
					  "LoadThreshold" : 50,
					  "MemoryThreshold" : 50,
					  "ThresholdsWaitTime" : 1
  				},
				  "Enable" : "true",
				  "UpScaling" : { 
            "CpuThreshold" : 90,
					  "IgnoreMetricsTime" : 10,
					  "InstanceCount" : 1,
					  "LoadThreshold" : 90,
					  "MemoryThreshold" : 90,
					  "ThresholdsWaitTime" : 1
  				}
        },
        "CustomSecurityGroupIds": [ { "Ref": "StorageSecurityGroup" }, { "Ref": "WebServerSecurityGroup" }],
        "CustomRecipes": {
        	"Setup" : ["main::setup", "main::mountEFS", "main::deploy_base", "storage::deploy_mongo", "storage::deploy_mongo_single", "main::client_settings", "main::deploy_scripts", "main::deploy_duplicity"],
        	"Configure" : [],
				  "Deploy" : ["main::deploy_solodev"],
				  "Shutdown" : [],
				  "Undeploy" : []
				},
				"VolumeConfigurations" : [
	         {
	         	 "MountPoint" : "/mongo",
	           "Size": { "Ref" : "MongoVolumeSize" },
	           "NumberOfDisks": 1
	         }
	      ]
      }
    }, 

    "SolodevInstance1": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
      	"AmiId":{
          "Fn::FindInMap":[
            "AWSRegionWebBaseAMI",
            {
              "Ref":"AWS::Region"
            },
            {
              "Fn::FindInMap":[
                "AWSInstanceType2Arch",
                {
                  "Ref":"InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "Os": "Custom",
        "StackId": { "Ref": "SolodevStack" },
        "LayerIds": [ { "Ref": "WebServerLayer" } ],
        "SubnetId": { "Fn::Select": [ "0", { "Ref":"Subnets" } ] },
        "InstanceType":{
          "Ref":"InstanceType"
        },
        "RootDeviceType" : "ebs",
        "SshKeyName" : {
          "Ref":"KeyName"
        }
      }
    },
    
		"WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound requests from the ELB to the OpsWorks instances",
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "SourceSecurityGroupId": { "Ref": "ELBSecurityGroup" } },
          { "IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "SourceSecurityGroupId": { "Ref": "ELBSecurityGroup" } }
        ],
        "Tags": [
	      	{"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "WebServerSecurityGroup"]]}}
	      ]
      }
    },
    
    "StorageSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound requests from the ELB to the OpsWorks instances",
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "SourceSecurityGroupId": { "Ref": "WebServerSecurityGroup" } },
          {"IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "SourceSecurityGroupId": { "Ref": "WebServerSecurityGroup" } },
          {"IpProtocol" : "tcp", "FromPort" : "27017", "ToPort" : "27017", "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"} },
	     		{"IpProtocol" : "tcp", "FromPort" : "28017", "ToPort" : "28017", "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"} },
          {
            "IpProtocol": "tcp",
            "FromPort": "38465",
            "ToPort": "38468",
            "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "24007", 
            "ToPort": "24107",
            "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"}
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "111",
            "ToPort": "111",
            "SourceSecurityGroupId": {"Ref": "WebServerSecurityGroup"}
          }
        ]
      }
    }, 
    
    "SolodevApp": {
      "Type": "AWS::OpsWorks::App",
      "Properties": {
        "StackId": { "Ref": "SolodevStack" },
        "Name": "Solodev",
        "Type": "other",
        "Attributes": {
          "DocumentRoot": " "
        }
      }
    },
    
    "DB":{
      "Type":"AWS::RDS::DBInstance",
      "Properties":{
        "DBName":{
          "Ref":"DBName"
        },
        "MultiAZ":{
          "Ref":"MultiAZDatabase"
        },
        "DBInstanceIdentifier":{"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "RDS"]]},
        "AllocatedStorage":{
          "Ref":"DBAllocatedStorage"
        },
        "BackupRetentionPeriod" : "7",
        "PreferredBackupWindow": "01:30-03:00",
        "PreferredMaintenanceWindow": "sat:04:00-sat:05:30",
        "DBInstanceClass":{
          "Ref":"DBClass"
        },
        "Engine":"MySQL",
        "MasterUsername":{
          "Ref":"DBUsername"
        },
        "MasterUserPassword":{
          "Ref":"DBPassword"
        },
        "DBSubnetGroupName":{
          "Ref":"DBSubnetGroup"
        },
        "VPCSecurityGroups" : [ { "Fn::GetAtt": [ "RDSSecurityGroup", "GroupId" ] } ],
        "Tags":[
        	{"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "RDS"]]}}
        ]
      }
    },
    
    "DBSubnetGroup":{
      "Type":"AWS::RDS::DBSubnetGroup",
      "Properties":{
        "DBSubnetGroupDescription":"Subnets available for the RDS DB Instance",
        "SubnetIds":{
          "Ref":"Subnets"
        },
        "Tags":[
        	{"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "DBSubnetGroup"]]}}
        ]
      }
    },
    
    "RDSSecurityGroup":{
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": ["StorageSecurityGroup"],
	    "Properties" : {
	      "GroupDescription": "Open database for access",
	      "VpcId": { "Ref": "VpcId" },
	      "SecurityGroupIngress" : [{
	        "IpProtocol" : "tcp",
	        "FromPort" : "3306",
	        "ToPort" : "3306",
	        "SourceSecurityGroupId" : { "Ref" : "StorageSecurityGroup" }
	      }],
	      "Tags": [
	      	{"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "RDSSecurityGroup"]]}}
	      ]
	    }
    },
    
    "OpsWorksServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [{ "Fn::FindInMap" : ["Region2Principal", {"Ref" : "AWS::Region"}, "OpsWorksPrincipal"]}] },
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "opsworks-service",
            "PolicyDocument": {
              "Statement": [{
                "Effect": "Allow",
                "Action": [ "rds:*", "ec2:*", "iam:PassRole", "cloudwatch:GetMetricStatistics", "elasticloadbalancing:*" ],
                "Resource": "*"
              }]
            }
          }
        ]
      }
    },
    
    "SolodevInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies":[ {
          "PolicyName": "PowerUserPolicy",
          "PolicyDocument": {
            "Statement": [ {
              "Sid": "PowerUserStmt",
              "Effect": "Allow",
              "NotAction": "iam:*",
              "Resource": "*"
            } ]
          }
        }]
      }
    },
    
    "SolodevInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "SolodevInstanceRole" } ]
      }
    },
    
    "CfnUser":{
      "Type":"AWS::IAM::User",
      "Properties":{
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"root",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "cloudformation:DescribeStackResource",
                    "s3:GetObject"
                  ],
                  "Resource":"*"
                }
              ]
            }
          },
          {
            "PolicyName":"backupdef",
            "PolicyDocument":{
              "Statement":[
                {
			            "Effect": "Allow",
			            "Action": "s3:ListAllMyBuckets",
			            "Resource": "arn:aws:s3:::*"
			        	},
                {
                  "Effect":"Allow",
                  "Action":[
                    "s3:*"
                  ],
                  "Resource":[
                  {
		                "Fn::Join":[
		                  "",
		                  [
		                    "arn:aws:s3:::",
		                    {
													"Fn::Join": ["-", [{"Ref":"ClientName"}, {"Ref": "AWS::StackName"}]]
			       						}
		                  ]
		                ]
		              },
		              {
		                "Fn::Join":[
		                  "",
		                  [
		                    "arn:aws:s3:::",
		                    {
													"Fn::Join": ["-", [{"Ref":"ClientName"}, {"Ref": "AWS::StackName"}]]
			       						}, "/*"
		                  ]
		                ]
		              }]
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "s3:*"
                  ],
                  "Resource":[
                  {
		                "Fn::Join":[
		                  "",
		                  [
		                    "arn:aws:s3:::",
		                    {
													"Fn::Join": ["-", [{"Ref":"ClientName"}, {"Ref": "AWS::StackName"}, "backup"]]
			       						}
		                  ]
		                ]
		              },
		              {
		                "Fn::Join":[
		                  "",
		                  [
		                    "arn:aws:s3:::",
		                    {
													"Fn::Join": ["-", [{"Ref":"ClientName"}, {"Ref": "AWS::StackName"}, "backup"]]
			       						}, "/*"
		                  ]
		                ]
		              }]
                }
              ]
            }
          }
        ]
      }
    },
    
    "CfnKeys":{
      "Type":"AWS::IAM::AccessKey",
      "Properties":{
        "UserName":{
          "Ref":"CfnUser"
        }
      }
    },

    "ELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "CrossZone" : "true",
        "SecurityGroups": [ { "Ref": "ELBSecurityGroup" } ],
        "Subnets":{
          "Ref":"Subnets"
        },
				"Listeners":[
          {
            "LoadBalancerPort":"80",
            "InstancePort":{
              "Ref":"WebServerPort"
            },
            "Protocol":"HTTP",
            "PolicyNames" : [ {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "StickyLoadBalancer"]]} ]
          }
        ],
        "HealthCheck":{
          "Target":{
            "Fn::Join":[
              "",
              [
                "HTTP:",
                {
                  "Ref":"WebServerPort"
                },
                "/"
              ]
            ]
          },
          "HealthyThreshold":"2",
          "UnhealthyThreshold":"2",
          "Interval":"30",
          "Timeout":"25"
        },
        "LBCookieStickinessPolicy": [ { "PolicyName" : {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "StickyLoadBalancer"]]}} ],
        "Tags":[
        	{"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "ElasticLoadBalancer"]]}}
        ]
      }
    },

    "ELBAttachment": {
      "Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
      "Properties": {
        "ElasticLoadBalancerName": { "Ref": "ELB" },
        "LayerId": { "Ref": "WebServerLayer" }
      }
    },

    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound access to the ELB",
        "VpcId": { "Ref": "VpcId" },
        "SecurityGroupIngress": [ {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        },{
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "CidrIp": "0.0.0.0/0"
        } ],
        "SecurityGroupEgress": [ {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": "0.0.0.0/0"
        },{
          "IpProtocol": "tcp",
          "FromPort": "443",
          "ToPort": "443",
          "CidrIp": "0.0.0.0/0"
        } ],
        "Tags": [
	      	{"Key": "Name", "Value": {"Fn::Join": ["-", [{"Ref": "AWS::StackName"}, "ELBSecurityGroup"]]}}
	      ]
      }
    },
   
   "IPAddress": {
			"Type": "Custom::PublicIpLookUp",
			"Properties": {
				"ServiceToken": { "Fn::GetAtt" : ["IPLookup", "Arn"] },
				"OWInstanceId": {
						"Ref": "SolodevInstance1"
				}
			}
		},
   
   "IPLookup": {
		  "Type": "AWS::Lambda::Function",
		  "Properties": {
		    "Handler": "cfn_python_opsworks.lambda_handler",
		    "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
		    "Code": {
		      "S3Bucket": "solodev-install",
		      "S3Key": "opsworks_getip.zip"
		    },
		    "Runtime": "python2.7",
		    "Timeout": "25"
		  }
		},
		
		"LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "Path": "/", 
        "Policies": [{
          "PolicyName": "LambdaExecutionRole",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [ {
              "Sid": "LambdaExecutionStmt",
              "Effect": "Allow",
              "NotAction": "iam:*",
              "Resource": "*"
            } ]
          }
        }]
      }
  	}
   
  },
  
  "Outputs": {
    "StackId": {
      "Description": "Stack Id of newly created OpsWorks stack",
      "Value": { "Ref": "SolodevStack" }
    },
    "AppId": {
      "Description" : "Application Id of newly created OpsWorks application",
      "Value": { "Ref": "SolodevApp" }
    },
    "VPC": {
      "Description": "VPC Id",
      "Value": { "Ref": "VpcId" }
    },
    "AdminEmail": {
      "Description": "CMS Admin User Email",
      "Value": { "Ref": "AdminUser" }
    },
    "AdminUser": {
      "Description": "CMS Admin User",
      "Value": { "Ref": "AdminUser" }
    },
    "AdminPassword": {
      "Description": "CMS Admin Password",
      "Value": { "Ref": "AdminPassword" }
    },
    "CNAME": {
      "Description" : "URL for admin login.  URL to use as CNAME for DNS. Please point all CNAME dns entries to this URL.",
      "Value" : { "Fn::GetAtt" : [ "ELB", "DNSName" ]}
    },
    "CNAMEURL": {
      "Description" : "URL for admin login.  URL to use as CNAME for DNS. Please point all CNAME dns entries to this URL.",
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ELB", "DNSName" ]}]] }
    },
    "DedicatedIP" : {
      "Value" : { "Fn::GetAtt" : [ "IPAddress", "PublicIp" ]},
      "Description" : "Point DNS A records to this IP and server will redirect to the server CNAME.  If your DNS supports pointing A records to CNAME's please use CNAME instead."
    }
  }
}